syntax = "proto3";

package service.problem.api;
option go_package = ".;api";

// protoc -I=. -I=$GOPATH/pkg/mod --go-grpc_out=. --go-http_out=. --gogo_out=.  *.proto
// Another-Nikki/interact_hub/service/api
// kratos proto server *.proto -t ../internal/service

import "google/api/annotations.proto";

service Problem {
  rpc PostProblem(PostProblemReq) returns (PostProblemResp){
    option (google.api.http) = {
      post: "/api/problem/post",
      body: "*",
    };
  };
  rpc GetProblemById(GetProblemByIdReq) returns (GetProblemByIdResp) {
    option (google.api.http) = {
      get: "/api/problem/{problem_id}"
    };
  };
  rpc GetProblemByPage(GetProblemByPageReq) returns (GetProblemByPageResp){
    option (google.api.http) = {
      get: "/api/problem/{page_size}/{page_num}"
    };
  };
}

message PostProblemReq {
  int64 problem_id = 1;
  string problem_title = 2;
  string problem_description = 3;
  string problem_content = 4;
}
message PostProblemResp {
}

message GetProblemByIdReq {
  int64 problem_id = 1;
}
message GetProblemByIdResp {
  string problem_title = 1;
  string problem_description = 2;
  string problem_content = 3;
  string created_time = 4;
}

message GetProblemByPageReq {
  int64 page_num = 1;
  int64 page_size = 2;
}
message ProblemPageDetail {
  int64 problem_id = 1;
  string problem_title = 2;
  string created_time = 3;
}
message GetProblemByPageResp {
  repeated ProblemPageDetail problems = 1;
}


service Article {
  rpc PostArticle(PostArticleReq) returns (PostArticleResp){
    option (google.api.http) = {
      post: "/api/article/post",
      body: "*",
    };
  };
  rpc GetArticleById(GetArticleByIdReq) returns (GetArticleByIdResp){
    option (google.api.http) = {
      get: "/api/article/{article_id}"
    };
  };
  rpc GetArticleByPage(GetArticleByPageReq) returns (GetArticleByPageResp){
    option (google.api.http) = {
      get: "/api/article/{page_size}/{page_num}"
    };
  };
}

message PostArticleReq {
  int64 article_id = 1;
  string article_title = 2;
  string article_description = 3;
  string article_content = 4;
}
message PostArticleResp {
}

message GetArticleByIdReq {
  int64 article_id = 1;
}
message GetArticleByIdResp {
  string article_title = 1;
  string article_description = 2;
  string article_content = 3;
  string created_time = 4;
}

message GetArticleByPageReq {
  int64 page_num = 1;
  int64 page_size = 2;
}
message ArticlePageDetail {
  int64 article_id = 1;
  string article_title = 2;
  string created_time = 3;
}
message GetArticleByPageResp {
  repeated ArticlePageDetail articles = 1;
}


service User {
  rpc Login(LoginReq) returns (LoginResp) {

  };
  rpc Register(RegisterReq) returns (RegisterResp) {

  };
  rpc GetUserByUserName (GetUserByUserNameReq) returns (GetUserByUserNameResp) {

  };
  rpc GetUserById (GetUserByIdReq) returns (GetUserByIdResp) {

  };
}
message LoginReq {
  string username = 1;
  string password = 2;
}
message LoginResp {
  string token = 1;
}

message RegisterReq {
  string username = 1;
  string password = 2;
  string confirm_password = 3;
}
message RegisterResp {
  string token = 1;
}

message GetUserByUserNameReq {
  string username = 1;
}
message GetUserByUserNameResp {
  string username = 1;
  string avatar = 2;
}

message GetUserByIdReq {
  string user_id = 1;
}
message GetUserByIdResp {
  string username = 1;
  string avatar = 2;
}


service Comment {
  rpc PostComment (PostCommentReq) returns (PostCommentResp);
  rpc GetCommentsByArticleId (GetCommentsByArticleIdReq) returns (GetCommentsByArticleIdResp);
  rpc GetLastSevenComment (GetLastSevenCommentReq) returns (GetLastSevenCommentResp);
  rpc GetRandomComment (GetRandomCommentReq) returns (GetRandomCommentResp);
}

message PostCommentReq {
  string content = 1;
  int64 article_id = 2;
  string author_name = 3;
  string author_avatar = 4;
  int64 parent_id = 5;
  int64 root_id = 6;
}
message PostCommentResp {
}

message GetCommentsByArticleIdReq {
  int64 article_id = 1;
}
message Comments {
  string content = 1;
  string author_name = 2;
  string author_avatar = 3;
  int64 parent_id = 4;
  int64 root_id = 5;
  string created_time = 6;
}
message GetCommentsByArticleIdResp {
  repeated Comments comments = 1;
}

message GetLastSevenCommentReq {
  int64 article_id = 1;
}
message GetLastSevenCommentResp {
  repeated Comments comments = 1;
}

message GetRandomCommentReq {
  int64 article_id = 1;
}
message GetRandomCommentResp {
  Comments comments = 1;
}