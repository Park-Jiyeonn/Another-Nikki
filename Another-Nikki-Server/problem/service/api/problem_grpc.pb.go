// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: problem.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Problem_PostProblem_FullMethodName      = "/service.problem.api.Problem/PostProblem"
	Problem_GetProblemById_FullMethodName   = "/service.problem.api.Problem/GetProblemById"
	Problem_GetProblemByPage_FullMethodName = "/service.problem.api.Problem/GetProblemByPage"
)

// ProblemClient is the client API for Problem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProblemClient interface {
	PostProblem(ctx context.Context, in *PostProblemReq, opts ...grpc.CallOption) (*PostProblemResp, error)
	GetProblemById(ctx context.Context, in *GetProblemByIdReq, opts ...grpc.CallOption) (*GetProblemByIdResp, error)
	GetProblemByPage(ctx context.Context, in *GetProblemByPageReq, opts ...grpc.CallOption) (*GetProblemByPageResp, error)
}

type problemClient struct {
	cc grpc.ClientConnInterface
}

func NewProblemClient(cc grpc.ClientConnInterface) ProblemClient {
	return &problemClient{cc}
}

func (c *problemClient) PostProblem(ctx context.Context, in *PostProblemReq, opts ...grpc.CallOption) (*PostProblemResp, error) {
	out := new(PostProblemResp)
	err := c.cc.Invoke(ctx, Problem_PostProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemClient) GetProblemById(ctx context.Context, in *GetProblemByIdReq, opts ...grpc.CallOption) (*GetProblemByIdResp, error) {
	out := new(GetProblemByIdResp)
	err := c.cc.Invoke(ctx, Problem_GetProblemById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemClient) GetProblemByPage(ctx context.Context, in *GetProblemByPageReq, opts ...grpc.CallOption) (*GetProblemByPageResp, error) {
	out := new(GetProblemByPageResp)
	err := c.cc.Invoke(ctx, Problem_GetProblemByPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProblemServer is the server API for Problem service.
// All implementations must embed UnimplementedProblemServer
// for forward compatibility
type ProblemServer interface {
	PostProblem(context.Context, *PostProblemReq) (*PostProblemResp, error)
	GetProblemById(context.Context, *GetProblemByIdReq) (*GetProblemByIdResp, error)
	GetProblemByPage(context.Context, *GetProblemByPageReq) (*GetProblemByPageResp, error)
	mustEmbedUnimplementedProblemServer()
}

// UnimplementedProblemServer must be embedded to have forward compatible implementations.
type UnimplementedProblemServer struct {
}

func (UnimplementedProblemServer) PostProblem(context.Context, *PostProblemReq) (*PostProblemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostProblem not implemented")
}
func (UnimplementedProblemServer) GetProblemById(context.Context, *GetProblemByIdReq) (*GetProblemByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemById not implemented")
}
func (UnimplementedProblemServer) GetProblemByPage(context.Context, *GetProblemByPageReq) (*GetProblemByPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemByPage not implemented")
}
func (UnimplementedProblemServer) mustEmbedUnimplementedProblemServer() {}

// UnsafeProblemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProblemServer will
// result in compilation errors.
type UnsafeProblemServer interface {
	mustEmbedUnimplementedProblemServer()
}

func RegisterProblemServer(s grpc.ServiceRegistrar, srv ProblemServer) {
	s.RegisterService(&Problem_ServiceDesc, srv)
}

func _Problem_PostProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostProblemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).PostProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Problem_PostProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).PostProblem(ctx, req.(*PostProblemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problem_GetProblemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).GetProblemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Problem_GetProblemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).GetProblemById(ctx, req.(*GetProblemByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Problem_GetProblemByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemByPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServer).GetProblemByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Problem_GetProblemByPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServer).GetProblemByPage(ctx, req.(*GetProblemByPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Problem_ServiceDesc is the grpc.ServiceDesc for Problem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Problem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.problem.api.Problem",
	HandlerType: (*ProblemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostProblem",
			Handler:    _Problem_PostProblem_Handler,
		},
		{
			MethodName: "GetProblemById",
			Handler:    _Problem_GetProblemById_Handler,
		},
		{
			MethodName: "GetProblemByPage",
			Handler:    _Problem_GetProblemByPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "problem.proto",
}
