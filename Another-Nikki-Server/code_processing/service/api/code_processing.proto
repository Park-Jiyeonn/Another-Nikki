syntax = "proto3";

package service.code_processing.api;
option go_package = "Another-Nikki/code_processing/service/api;api";

// protoc -I=. -I=$GOPATH/pkg/mod --go-grpc_out=. --gogo_out=. *.proto
// Another-Nikki/code_processing/service/api
// kratos proto server *.proto -t ../internal/service

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

service CodeProcessing {
	rpc SubmitCode (SubmitCodeReq) returns (SubmitCodeResp);
	rpc UpdateCodeCompileStatus(UpdateCodeCompileStatusReq) returns (UpdateCodeCompileStatusResp);
	rpc UpdateCodeJudgeStatus(UpdateCodeJudgeStatusReq) returns (UpdateCodeJudgeStatusResp);
}

message SubmitCodeReq {
	int64 UserID = 1  [json_name = "user_id", (gogoproto.jsontag) = "user_id"];
	string UserName = 2  [json_name = "user_name", (gogoproto.jsontag) = "user_name"];
	int64 ProblemID = 3  [json_name = "problem_id", (gogoproto.jsontag) = "problem_id"];
	string ProblemName = 4 [json_name = "problem_name", (gogoproto.jsontag) = "problem_name"];
	string Language = 5  [json_name = "language", (gogoproto.jsontag) = "language"];
	string Code = 6  [json_name = "code", (gogoproto.jsontag) = "code"];
}
message SubmitCodeResp {
}

message UpdateCodeCompileStatusReq {
	int64 CodeId = 1 [json_name = "code_id", (gogoproto.jsontag) = "code_id"];
	string Status = 2 [json_name = "status", (gogoproto.jsontag) = "status"];
	string CompileLog = 3 [json_name = "compile_log", (gogoproto.jsontag) = "compile_log"];
}
message UpdateCodeCompileStatusResp {

}

message UpdateCodeJudgeStatusReq {
	int64 CodeId = 1 [json_name = "code_id", (gogoproto.jsontag) = "code_id"];
	string Status = 2 [json_name = "status", (gogoproto.jsontag) = "status"];
}
message UpdateCodeJudgeStatusResp {
}