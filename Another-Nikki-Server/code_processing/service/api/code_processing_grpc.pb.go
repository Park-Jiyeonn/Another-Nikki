// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: code_processing.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CodeProcessing_SubmitCode_FullMethodName = "/service.code_processing.api.CodeProcessing/SubmitCode"
)

// CodeProcessingClient is the client API for CodeProcessing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeProcessingClient interface {
	SubmitCode(ctx context.Context, in *SubmitCodeReq, opts ...grpc.CallOption) (*SubmitCodeResp, error)
}

type codeProcessingClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeProcessingClient(cc grpc.ClientConnInterface) CodeProcessingClient {
	return &codeProcessingClient{cc}
}

func (c *codeProcessingClient) SubmitCode(ctx context.Context, in *SubmitCodeReq, opts ...grpc.CallOption) (*SubmitCodeResp, error) {
	out := new(SubmitCodeResp)
	err := c.cc.Invoke(ctx, CodeProcessing_SubmitCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeProcessingServer is the server API for CodeProcessing service.
// All implementations must embed UnimplementedCodeProcessingServer
// for forward compatibility
type CodeProcessingServer interface {
	SubmitCode(context.Context, *SubmitCodeReq) (*SubmitCodeResp, error)
	mustEmbedUnimplementedCodeProcessingServer()
}

// UnimplementedCodeProcessingServer must be embedded to have forward compatible implementations.
type UnimplementedCodeProcessingServer struct {
}

func (UnimplementedCodeProcessingServer) SubmitCode(context.Context, *SubmitCodeReq) (*SubmitCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCode not implemented")
}
func (UnimplementedCodeProcessingServer) mustEmbedUnimplementedCodeProcessingServer() {}

// UnsafeCodeProcessingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeProcessingServer will
// result in compilation errors.
type UnsafeCodeProcessingServer interface {
	mustEmbedUnimplementedCodeProcessingServer()
}

func RegisterCodeProcessingServer(s grpc.ServiceRegistrar, srv CodeProcessingServer) {
	s.RegisterService(&CodeProcessing_ServiceDesc, srv)
}

func _CodeProcessing_SubmitCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeProcessingServer).SubmitCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeProcessing_SubmitCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeProcessingServer).SubmitCode(ctx, req.(*SubmitCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CodeProcessing_ServiceDesc is the grpc.ServiceDesc for CodeProcessing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeProcessing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.code_processing.api.CodeProcessing",
	HandlerType: (*CodeProcessingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitCode",
			Handler:    _CodeProcessing_SubmitCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "code_processing.proto",
}
